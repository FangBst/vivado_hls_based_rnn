#include"activations.h"

FDATA_T m_sigmoid(FDATA_T input) {
	//return 1 / (1 + exp((double)-input));

	if(input>2.5) return 1;
	else if(input<-2.5) return 0;
	else {return ((FDATA_T)0.2*input+(FDATA_T)0.5);}
}

#define NUMBER_OF_LUT_ETRIES_TANH_1 256
FDATA_T tanh_lut(FDATA_T input)
{
static FDATA_T lut_tanh_1[NUMBER_OF_LUT_ETRIES_TANH_1] = {
-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-0.984375,-0.984375,-0.984375,-0.984375,-0.984375,-0.984375,-0.984375,-0.984375,-0.984375,-0.984375,-0.984375,-0.984375,-0.984375,-0.984375,-0.984375,
-0.984375,-0.984375,-0.984375,-0.984375,-0.984375,-0.984375,-0.984375,-0.984375,-0.984375,-0.96875,-0.96875,-0.96875,-0.96875,-0.96875,-0.96875,-0.96875,-0.96875,-0.96875,-0.96875,
-0.96875,-0.953125,-0.953125,-0.953125,-0.953125,-0.953125,-0.953125,-0.953125,-0.9375,-0.9375,-0.9375,-0.9375,-0.9375,-0.9375,-0.921875,-0.921875,-0.921875,-0.921875,-0.90625,-0.90625,
-0.90625,-0.90625,-0.890625,-0.890625,-0.890625,-0.875,-0.875,-0.875,-0.859375,-0.859375,-0.84375,-0.84375,-0.84375,-0.828125,-0.828125,-0.8125,-0.8125,-0.796875,-0.796875,-0.78125,
-0.765625,-0.765625,-0.75,-0.734375,-0.734375,-0.71875,-0.703125,-0.703125,-0.6875,-0.671875,-0.65625,-0.640625,-0.625,-0.609375,-0.59375,-0.578125,-0.5625,-0.546875,-0.53125,-0.515625,
-0.5,-0.484375,-0.46875,-0.453125,-0.421875,-0.40625,-0.390625,-0.375,-0.34375,-0.328125,-0.3125,-0.28125,-0.265625,-0.234375,-0.21875,-0.203125,-0.171875,-0.15625,-0.125,-0.109375,
-0.078125,-0.0625,-0.03125,-0.015625,0.015625,0.03125,0.0625,0.078125,0.109375,0.125,0.15625,0.171875,0.203125,0.21875,0.234375,0.265625,0.28125,0.3125,0.328125,0.34375,0.375,0.390625,
0.40625,0.421875,0.453125,0.46875,0.484375,0.5,0.515625,0.53125,0.546875,0.5625,0.578125,0.59375,0.609375,0.625,0.640625,0.65625,0.671875,0.6875,0.703125,0.703125,0.71875,0.734375,
0.734375,0.75,0.765625,0.765625,0.78125,0.796875,0.796875,0.8125,0.8125,0.828125,0.828125,0.84375,0.84375,0.84375,0.859375,0.859375,0.875,0.875,0.875,0.890625,0.890625,0.890625,0.90625,
0.90625,0.90625,0.90625,0.921875,0.921875,0.921875,0.921875,0.9375,0.9375,0.9375,0.9375,0.9375,0.9375,0.953125,0.953125,0.953125,0.953125,0.953125,0.953125,0.953125,0.96875,0.96875,
0.96875,0.96875,0.96875,0.96875,0.96875,0.96875,0.96875,0.96875,0.96875,0.984375,0.984375,0.984375,0.984375,0.984375,0.984375,0.984375,0.984375,0.984375,0.984375,0.984375,0.984375,
0.984375,0.984375,0.984375,0.984375,0.984375,0.984375,0.984375,0.984375,0.984375,0.984375,0.984375,0.984375,1,1,1,1,1,1,1,1,1,1};

	FDATA_T lower_limit = -3.0;
	FDATA_T upper_limit = 3.0;
	FDATA_T recip_step = 42.5;

	FDATA_T input_temp = input;
	FDATA_T output;

	// If we are outside of LUT range
	if (input_temp <= lower_limit)
	{
		output = lut_tanh_1[0];
	}
	else if (input_temp >= upper_limit)
	{
		output = lut_tanh_1[NUMBER_OF_LUT_ETRIES_TANH_1-1];
	}
	else
	{
		FDATA_T t = input_temp - lower_limit;
		int index = t * recip_step;
		output = lut_tanh_1[index];
	}
	return output;
}
FDATA_T m_tanh(FDATA_T input) {
	//return tanh(input);
	return tanh_lut(input);
	//return hls::tanh(input);
//	FDATA_T tmp=-input;
//	return ((hls::exp(input)-hls::exp(tmp))/(hls::exp(input)+hls::exp(tmp)));
}

FDATA_T m_relu(FDATA_T input) {
	if (input > 0) return input;
	return 0;
}
